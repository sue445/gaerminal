project.description = 'run groovy script on your Google App Engine app'
project.group       = 'net.sue445'
project.version     = '0.0.1'

def gaeVersion    = '1.7.7'
def slim3Version  = '1.0.16'
def groovyVersion = '2.1.3'
def lang = ['groovy', 'java']
boolean isUploadArchives = gradle.startParameter.taskNames.contains('uploadArchives')

lang.each {ln ->
    apply plugin: ln
}
apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-gae-plugin:0.8'
        classpath "com.google.appengine:appengine-maven-plugin:1.7.7"
    }
}

sourceCompatibility = 1.6
targetCompatibility = 1.6


if(!isUploadArchives) {
    apply plugin: 'gae'
    gae {
        httpPort = 8888
        optimizeWar = true

        appcfg {
            // define at gradle.properties
            email = googleAccount
            passIn = true

            logs {
                severity = 1
                outputFile = file('log.txt')
            }

            app {
                id = 'gaeminal'
            }
        }

        downloadSdk = true
        System.properties['appengine.sdk.root'] = gaeDownloadSdk.explodedSdkDirectory.getPath() + File.separator + "appengine-java-sdk-$gaeVersion"

        gaeRun.doFirst{
            copy {
                from('web/WEB-INF/') {
                    include '**/*'
                }

                into 'build/exploded-war/WEB-INF/'
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    groovy "org.codehaus.groovy:groovy-all:${groovyVersion}"

    if (isUploadArchives) {
        compile "org.codehaus.groovy:groovy:${groovyVersion}"
    } else{
        gaeSdk "com.google.appengine:appengine-java-sdk:$gaeVersion"
    }

    compile 'javax.servlet:servlet-api:2.5'
    compile 'javax.servlet:jsp-api:2.0'

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

task structure(depends : idea) << {
    def dirs = []
    dirs << 'src'
    sourceSets.all { src ->
        dirs << "src/${src.name}"
        lang.each { ln ->
            dirs << "src/${src.name}/${ln}"
        }
        dirs << "src/${src.name}/resources"
    }
    dirs.each {
        def dir = new File(it)
        if(dir.exists() == false) dir.mkdir()
    }
}

// ref. http://d.hatena.ne.jp/int128/20130409/1365434513
task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from "${buildDir}/javadoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

if(isUploadArchives) {
    apply from: 'build.publish.gradle'
}
