def gaeVersion = '1.7.6'
def slim3Version = '1.0.16'
def lang = ['java', 'groovy']

lang.each {ln ->
    apply plugin: ln
}
apply plugin: 'idea'
apply plugin: 'gae'

sourceCompatibility = 1.6
targetCompatibility = 1.6


buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-gae-plugin:0.8'
        classpath "com.google.appengine:appengine-maven-plugin:1.7.6"
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://www.seasar.org/maven/maven2"
    }
}

dependencies {
    groovy 'org.codehaus.groovy:groovy:2.1.1'
    gaeSdk "com.google.appengine:appengine-java-sdk:$gaeVersion"

    compile 'javax.servlet:servlet-api:2.5'
    compile 'javax.servlet:jsp-api:2.0'

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion"
    testCompile "com.google.appengine:appengine-testing:$gaeVersion"
    testCompile "com.google.appengine:appengine-api-stubs:$gaeVersion"

    testCompile ("org.slim3:slim3:$slim3Version") {
        exclude group: 'com.google.appengine', module: 'appengine-api-1.0-sdk'
        exclude group: 'com.google.appengine', module: 'appengine-api-labs'
    }
}

gae {
    httpPort = 8888
    optimizeWar = true

    appcfg {
        email = googleAccount
        passIn = true

        logs {
            severity = 1
            outputFile = file('log.txt')
        }

        app {
            id = 'gaeminal'
        }
    }

    downloadSdk = true
    System.properties['appengine.sdk.root'] = gaeDownloadSdk.explodedSdkDirectory.getPath() + File.separator + "appengine-java-sdk-$gaeVersion"

    gaeRun.doFirst{
        copy {
            from('web/WEB-INF/') {
                include '**/*'
            }

            into 'build/exploded-war/WEB-INF/'
        }
    }
}

task structure(depends : idea) << {
    def dirs = []
    dirs << 'src'
    sourceSets.all { src ->
        dirs << "src/${src.name}"
        lang.each { ln ->
            dirs << "src/${src.name}/${ln}"
        }
        dirs << "src/${src.name}/resources"
    }
    dirs.each {
        def dir = new File(it)
        if(dir.exists() == false) dir.mkdir()
    }
}

