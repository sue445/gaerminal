// ref. http://d.hatena.ne.jp/int128/20130409/1365434513
apply plugin: 'signing'
apply plugin: 'maven'

boolean validProperty(propertyName) {
    try { project.property(propertyName) != null }
    catch (MissingPropertyException) { false }
}

boolean isRemoteDeploy(){
    deploy == "release" || deploy == "snapshot"
}

assert validProperty('signing.keyId'),             'properties for signing must be provided'
assert validProperty('signing.secretKeyRingFile'), 'properties for signing must be provided'
assert validProperty('sonatypeUsername'),          'properties for publish must be provided'
assert validProperty('sonatypeFullname'),          'properties for publish must be provided'

String askPassword(prompt) {
    "${System.console().readPassword(prompt)}"
}

if(isRemoteDeploy()){
    ext.'signing.password' = askPassword("Enter password for PGP key ${property('signing.keyId')}: ")
    ext.'sonatypePassword' = askPassword("Enter password for ${sonatypeUsername}@oss.sonatype.org: ")

    signing {
        sign configurations.archives
    }
}

// gradle -Pdeploy=(local|snapshot|release) uploadArchives
uploadArchives {
    repositories.mavenDeployer {
        switch (deploy){
            case "snapshot":
                println "deploy to sonatype snapshot"
                repository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                break
            case "release":
                println "deploy to sonatype release"
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                break
            default:    // deploy to local path
                println "deploy to local repo: ${localRepoPath}"
                // defined at gradle.properties
                repository(url: localRepoPath)
                break
        }

        pom.groupId    = project.group
        pom.artifactId = project.name
        pom.version    = project.version
        pom.project {
            name        project.name
            packaging   'jar'
            description project.description
            url         'https://github.com/sue445/gaerminal'
            scm {
                url 'git://github.com/sue445/gaerminal.git'
                connection 'scm:git:git://github.com/sue445/gaerminal.git'
                developerConnection 'scm:git:git://github.com/sue445/gaerminal.git'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id sonatypeUsername
                    name sonatypeFullname
                }
            }
        }
    }
}